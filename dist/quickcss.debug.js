// Generated by CoffeeScript 1.12.2
(function() {
  var POSSIBLE_PREFIXES, QUAD_SHORTHANDS, QuickCss, REQUIRES_UNIT_VALUE, helpers, regEx, sampleDiv, sampleStyle;
  POSSIBLE_PREFIXES = ['webkit', 'moz', 'ms', 'o'];
  REQUIRES_UNIT_VALUE = ['backgroundPositionX', 'backgroundPositionY', 'blockSize', 'borderWidth', 'columnRuleWidth', 'cx', 'cy', 'fontSize', 'gridColumnGap', 'gridRowGap', 'height', 'inlineSize', 'lineHeight', 'minBlockSize', 'minHeight', 'minInlineSize', 'minWidth', 'maxHeight', 'maxWidth', 'outlineOffset', 'outlineWidth', 'perspective', 'shapeMargin', 'strokeDashoffset', 'strokeWidth', 'textIndent', 'width', 'wordSpacing', 'top', 'bottom', 'left', 'right', 'x', 'y'];
  QUAD_SHORTHANDS = ['margin', 'padding', 'border', 'borderRadius'];
  QUAD_SHORTHANDS.forEach(function(property) {
    var direction, i, len, ref, results;
    REQUIRES_UNIT_VALUE.push(property);
    ref = ['Top', 'Bottom', 'Left', 'Right'];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      direction = ref[i];
      results.push(REQUIRES_UNIT_VALUE.push(property + direction));
    }
    return results;
  });
  sampleDiv = document.createElement('div');
  sampleStyle = sampleDiv.style;
  regEx = {
    lengthValue: /^\d+(?:[a-z]|\%)+$/i,
    digits: /\d+$/,
    whitespace: /\s/
  };
  helpers = {};
  helpers.includes = function(target, item) {
    return target && target.indexOf(item) !== -1;
  };
  helpers.isIterable = function(target) {
    return target && typeof target === 'object' && typeof target.length === 'number' && !target.nodeType;
  };
  helpers.isPropSupported = function(property) {
    return typeof sampleStyle[property] !== 'undefined';
  };
  helpers.toTitleCase = function(string) {
    return string[0].toUpperCase() + string.slice(1);
  };
  helpers.normalizeProperty = function(property) {
    var i, len, prefix, propertyPrefixed, propertyTitled;
    if (this.isPropSupported(property)) {
      return property;
    } else {
      propertyTitled = this.toTitleCase(property);
      for (i = 0, len = POSSIBLE_PREFIXES.length; i < len; i++) {
        prefix = POSSIBLE_PREFIXES[i];
        propertyPrefixed = "" + prefix + propertyTitled;

        /* istanbul ignore next */
        if (this.isPropSupported(propertyPrefixed)) {
          return propertyPrefixed;
        }
      }
    }
  };
  helpers.normalizeValue = function(property, value) {
    if (this.includes(REQUIRES_UNIT_VALUE, property) && value !== null) {
      value = '' + value;
      if (regEx.digits.test(value) && !regEx.lengthValue.test(value) && !regEx.whitespace.test(value)) {
        value += 'px';
      }
    }
    return value;
  };
  QuickCss = function(targetEl, property, value) {
    var i, len, subEl, subProperty, subValue;
    if (helpers.isIterable(targetEl)) {
      for (i = 0, len = targetEl.length; i < len; i++) {
        subEl = targetEl[i];
        QuickCss(subEl, property, value);
      }
    } else if (typeof property === 'object') {
      for (subProperty in property) {
        subValue = property[subProperty];
        QuickCss(targetEl, subProperty, subValue);
      }
    } else {
      property = helpers.normalizeProperty(property);
      if (typeof value === 'undefined') {
        return getComputedStyle(targetEl)[property];
      } else if (property) {
        targetEl.style[property] = helpers.normalizeValue(property, value);
      }
    }
  };
  QuickCss.version = '1.0.5';

  /* istanbul ignore next */
  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    return module.exports = QuickCss;
  } else if (typeof define === 'function' && define.amd) {
    return define(['quickdom'], function() {
      return QuickCss;
    });
  } else {
    return this.Css = QuickCss;
  }
})();
