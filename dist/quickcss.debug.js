(function (require) {
require = (function (cache, modules, cx) {
var loader = function (r) {
if (!modules[r]) throw new Error(r + ' is not a module');
return cache[r] ? cache[r].exports : ((cache[r] = {
exports: {}
}, cache[r].exports = modules[r].call(cx, require, cache[r], cache[r].exports)));
};
loader.modules = modules;
return loader;
})({}, {
0: function (require, module, exports) {
var quickcss;
var helpers = require(1);
var __constants2 = require(2);
quickcss = function (targetEl, property, value, important) {
var computedStyle, i, len, subEl, subProperty, subValue;
switch (false) {
case !helpers.isIterable(targetEl):
for ((i = 0, len = targetEl.length); i < len; i++) {
subEl = targetEl[i];
quickcss(subEl, property, value);
}
break;
case typeof property !== 'object':
for (subProperty in property) {
subValue = property[subProperty];
quickcss(targetEl, subProperty, subValue);
}
break;
default:
property = helpers.normalizeProperty(property);
if (typeof value === 'undefined') {
computedStyle = targetEl._computedStyle || (targetEl._computedStyle = getComputedStyle(targetEl));
return computedStyle[property];
} else if (property) {
targetEl.style.setProperty(property, helpers.normalizeValue(property, value), important ? __constants2.IMPORTANT : void 0);
}
}
};
quickcss.animation = function (name, frames) {
var frame, generated, prefix, rules;
if (name && typeof name === 'string' && frames && typeof frames === 'object') {
prefix = helpers.getPrefix('animation');
generated = '';
for (frame in frames) {
rules = frames[frame];
generated += frame + " {" + (helpers.ruleToString(rules)) + "}";
}
generated = "@" + prefix + "keyframes " + name + " {" + generated + "}";
return helpers.inlineStyle(generated, true, 0);
}
};
quickcss.register = function (rule, level, important) {
var className, ref, style;
if (rule && typeof rule === 'object') {
level || (level = 0);
rule = helpers.ruleToString(rule, important);
if (!(className = (ref = helpers.inlineStyleConfig[level]) != null ? ref[rule] : void 0)) {
className = helpers.hash(rule);
style = "." + className + " {" + rule + "}";
helpers.inlineStyle(style, className, level);
}
return className;
}
};
quickcss.clearRegistered = function (level) {
return helpers.clearInlineStyle(level || 0);
};
quickcss.UNSET = (function () {
switch (false) {
case !helpers.isValueSupported('display', 'unset'):
return 'unset';
case !helpers.isValueSupported('display', 'initial'):
return 'initial';
case !helpers.isValueSupported('display', 'inherit'):
return 'inherit';
}
})();
quickcss.supports = helpers.isValueSupported;
quickcss.supportsProperty = helpers.isPropSupported;
quickcss.normalizeProperty = helpers.normalizeProperty;
quickcss.normalizeValue = helpers.normalizeValue;
quickcss.version = "1.4.0";
module.exports = quickcss;
return module.exports;
},
1: function (require, module, exports) {
var SAMPLE_STYLE, styleConfig;
var __constants = require(2);
SAMPLE_STYLE = document.createElement('div').style;
var includes = exports.includes = function includes(target, item) {
return target && target.indexOf(item) !== -1;
};
var isIterable = exports.isIterable = function isIterable(target) {
return target && typeof target === 'object' && typeof target.length === 'number' && !target.nodeType;
};
var toKebabCase = exports.toKebabCase = function toKebabCase(string) {
return string.replace(__constants.REGEX_KEBAB, function (e, letter) {
return "-" + (letter.toLowerCase());
});
};
var isPropSupported = exports.isPropSupported = function isPropSupported(property) {
return typeof SAMPLE_STYLE[property] !== 'undefined';
};
var isValueSupported = exports.isValueSupported = function isValueSupported(property, value) {
if (window.CSS && window.CSS.supports) {
return window.CSS.supports(property, value);
} else {
SAMPLE_STYLE[property] = value;
return SAMPLE_STYLE[property] === '' + value;
}
};
var getPrefix = exports.getPrefix = function getPrefix(property, skipInitialCheck) {
var j, len1, prefix;
if (skipInitialCheck || !isPropSupported(property)) {
for ((j = 0, len1 = __constants.POSSIBLE_PREFIXES.length); j < len1; j++) {
prefix = __constants.POSSIBLE_PREFIXES[j];
if (isPropSupported("-" + prefix + "-" + property)) {
return "-" + prefix + "-";
}
}
}
return '';
};
var normalizeProperty = exports.normalizeProperty = function normalizeProperty(property) {
property = toKebabCase(property);
if (isPropSupported(property)) {
return property;
} else {
return "" + (getPrefix(property, true)) + property;
}
};
var normalizeValue = exports.normalizeValue = function normalizeValue(property, value) {
if (includes(__constants.REQUIRES_UNIT_VALUE, property) && value !== null) {
value = '' + value;
if (__constants.REGEX_DIGITS.test(value) && !__constants.REGEX_LEN_VAL.test(value) && !__constants.REGEX_SPACE.test(value)) {
value += property === 'line-height' ? 'em' : 'px';
}
}
return value;
};
var sort = exports.sort = function sort(array) {
var great, i, len, less, pivot;
if (array.length < 2) {
return array;
} else {
pivot = array[0];
less = [];
great = [];
len = array.length;
i = 0;
while (++i !== len) {
if (array[i] <= pivot) {
less.push(array[i]);
} else {
great.push(array[i]);
}
}
return sort(less).concat(pivot, sort(great));
}
};
var hash = exports.hash = function hash(string) {
var hsh, i, length;
hsh = 5381;
i = -1;
length = string.length;
while (++i !== string.length) {
hsh = ((hsh << 5) - hsh) + string.charCodeAt(i);
hsh |= 0;
}
return '_' + (hsh < 0 ? hsh * -2 : hsh);
};
var ruleToString = exports.ruleToString = function ruleToString(rule, important) {
var j, len1, output, prop, property, props, value;
output = '';
props = sort(Object.keys(rule));
for ((j = 0, len1 = props.length); j < len1; j++) {
prop = props[j];
if (typeof rule[prop] === 'string' || typeof rule[prop] === 'number') {
property = normalizeProperty(prop);
value = normalizeValue(property, rule[prop]);
if (important) {
value += " !important";
}
output += property + ":" + value + ";";
}
}
return output;
};
var inlineStyleConfig = exports.inlineStyleConfig = styleConfig = Object.create(null);
var inlineStyle = exports.inlineStyle = function inlineStyle(rule, valueToStore, level) {
var config, styleEl;
if (!(config = styleConfig[level])) {
styleEl = document.createElement('style');
styleEl.id = "quickcss" + (level || '');
document.head.appendChild(styleEl);
styleConfig[level] = config = {
el: styleEl,
content: '',
cache: Object.create(null)
};
}
if (!config.cache[rule]) {
config.cache[rule] = valueToStore || true;
config.el.textContent = config.content += rule;
}
};
var clearInlineStyle = exports.clearInlineStyle = function clearInlineStyle(level) {
var config, j, key, keys, len1;
if (config = styleConfig[level]) {
if (!config.content) {
return;
}
config.el.textContent = config.content = '';
keys = Object.keys(config.cache);
for ((j = 0, len1 = keys.length); j < len1; j++) {
key = keys[j];
config.cache[key] = null;
}
}
};
return module.exports;
},
2: function (require, module, exports) {
var REGEX_LEN_VAL = exports.REGEX_LEN_VAL = /^\d+(?:[a-z]|\%)+$/i;
var REGEX_DIGITS = exports.REGEX_DIGITS = /\d+$/;
var REGEX_SPACE = exports.REGEX_SPACE = /\s/;
var REGEX_KEBAB = exports.REGEX_KEBAB = /([A-Z])+/g;
var IMPORTANT = exports.IMPORTANT = 'important';
var POSSIBLE_PREFIXES = exports.POSSIBLE_PREFIXES = ['webkit', 'moz', 'ms', 'o'];
var REQUIRES_UNIT_VALUE = exports.REQUIRES_UNIT_VALUE = ['background-position-x', 'background-position-y', 'block-size', 'border-width', 'columnRule-width', 'cx', 'cy', 'font-size', 'grid-column-gap', 'grid-row-gap', 'height', 'inline-size', 'line-height', 'minBlock-size', 'min-height', 'min-inline-size', 'min-width', 'max-height', 'max-width', 'outline-offset', 'outline-width', 'perspective', 'shape-margin', 'stroke-dashoffset', 'stroke-width', 'text-indent', 'width', 'word-spacing', 'top', 'bottom', 'left', 'right', 'x', 'y'];
var QUAD_SHORTHANDS = exports.QUAD_SHORTHANDS = ['margin', 'padding', 'border', 'border-radius'];
var DIRECTIONS = exports.DIRECTIONS = ['top', 'bottom', 'left', 'right'];
QUAD_SHORTHANDS.forEach(function (property) {
var direction, i, len;
REQUIRES_UNIT_VALUE.push(property);
for ((i = 0, len = DIRECTIONS.length); i < len; i++) {
direction = DIRECTIONS[i];
REQUIRES_UNIT_VALUE.push(property + '-' + direction);
}
});
return module.exports;
}
}, this);
if (typeof define === 'function' && define.umd) {
define(function () {
return require(0);
});
} else if (typeof module === 'object' && module.exports) {
module.exports = require(0);
} else {
return this['quickcss'] = require(0);
}
}).call(this, null);


//# sourceMappingURL=data:application/json;charset=utf-8;base64,